/* Generated by AN DISI Unibo */ 
package it.unibo.mind;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractMind extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	//protected String mqttServer = "tcp://localhost:1883";
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractMind(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/mind/WorldTheory.pl",
			setTheEnv( outEnvView )  , "initMind");
			this.planFilePath = "./srcMore/it/unibo/mind/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "initMind" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("initMind",initMind);
	    	stateTab.put("waitAndCheckCond",waitAndCheckCond);
	    	stateTab.put("startAppl",startAppl);
	    	stateTab.put("exploreStep",exploreStep);
	    	stateTab.put("exploreUncovered",exploreUncovered);
	    	stateTab.put("backToHome",backToHome);
	    	stateTab.put("waitingToRemoveBomb",waitingToRemoveBomb);
	    	stateTab.put("updateMapAndBackToInit",updateMapAndBackToInit);
	    	stateTab.put("doActions",doActions);
	    	stateTab.put("nextMove",nextMove);
	    	stateTab.put("waitForwardHomeMoveAnswer",waitForwardHomeMoveAnswer);
	    	stateTab.put("handleCmdDone",handleCmdDone);
	    	stateTab.put("checkStop",checkStop);
	    	stateTab.put("handleStop",handleStop);
	    	stateTab.put("resumeExploration",resumeExploration);
	    	stateTab.put("haltAndGoToHome",haltAndGoToHome);
	    	stateTab.put("handleError",handleError);
	    	stateTab.put("handleFixedObstacleCases",handleFixedObstacleCases);
	    	stateTab.put("handleObstacleBomb",handleObstacleBomb);
	    	stateTab.put("continueIsNotBomb",continueIsNotBomb);
	    	stateTab.put("backToHomeSinceBomb",backToHomeSinceBomb);
	    	stateTab.put("handleSonar",handleSonar);
	    	stateTab.put("haltAppl",haltAppl);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "mind tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun initMind = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("initMind",-1);
	    	String myselfName = "initMind";  
	    	it.unibo.planning.planUtil.initAI( myself  );
	    	temporaryStr = "\"mind WAITS\"";
	    	println( temporaryStr );  
	     connectToMqttServer("tcp://localhost:1883");
	    	//switchTo waitAndCheckCond
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "waitAndCheckCond",false, false, null); 
	    }catch(Exception e_initMind){  
	    	 println( getName() + " plan=initMind WARNING:" + e_initMind.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//initMind
	    
	    StateFun waitAndCheckCond = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitAndCheckCond",-1);
	    	String myselfName = "waitAndCheckCond";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?envCond(ko)" )) != null ){
	    	{//actionseq
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(atHomeWithInvalidCondition)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(atHomeWithInvalidCondition)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(readyToStart)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(readyToStart)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("startAppl") }, 
	          new String[]{"true","M","startAppl" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitAndCheckCond){  
	    	 println( getName() + " plan=waitAndCheckCond WARNING:" + e_waitAndCheckCond.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitAndCheckCond
	    
	    StateFun startAppl = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_startAppl",0);
	     pr.incNumIter(); 	
	    	String myselfName = "startAppl";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?envCond(ko)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"stopWork(V)","stopWork(ko)", guardVars ).toString();
	    	sendMsg("stopWork",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "\"MIND START EXPLORATION \"";
	    	println( temporaryStr );  
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(exploring)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(exploring)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "startAppl";
	    	if( ! aar.getGoon() ) return ;
	    	parg = "assign(curNumExplore,0)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	it.unibo.planning.planUtil.cleanQa( myself  );
	    	parg = "assign(nstep,0)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"doExplore","doExplore", guardVars ).toString();
	    	sendMsg("doExplore",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitAndCheckCond"), stateTab.get("exploreStep"), stateTab.get("handleSonar"), stateTab.get("handleSonar") }, 
	          new String[]{"true","M","stopWork", "true","M","doExplore", "true","E","sonar", "true","E","sonarDetect" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_startAppl){  
	    	 println( getName() + " plan=startAppl WARNING:" + e_startAppl.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//startAppl
	    
	    StateFun exploreStep = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("exploreStep",-1);
	    	String myselfName = "exploreStep";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?envCond(V)" )) != null ){
	    	temporaryStr = "V";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?envCond(ko)" )) != null ){
	    	{//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(0,0,D)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"backToInit","backToInit", guardVars ).toString();
	    	sendMsg("backToInit",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"stopWork(V)","stopWork(ko)", guardVars ).toString();
	    	sendMsg("stopWork",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "exploreStep(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?continueExplore(N)" )) != null ){
	    	{//actionseq
	    	it.unibo.planning.planUtil.extendSpaceToexplore( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?getVal(curNumExplore,E)" )) != null ){
	    	it.unibo.planning.planUtil.setGoal( myself ,guardVars.get("E"), guardVars.get("E")  );
	    	}
	    	it.unibo.planning.planUtil.doPlanEnterprising( myself  );
	    	};//actionseq
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("exploreUncovered"), stateTab.get("backToHome"), stateTab.get("waitAndCheckCond") }, 
	          new String[]{"true","M","endAction", "true","M","stopWork", "true","M","backToInit" },
	          1000, "doActions" );//msgTransition
	    }catch(Exception e_exploreStep){  
	    	 println( getName() + " plan=exploreStep WARNING:" + e_exploreStep.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//exploreStep
	    
	    StateFun exploreUncovered = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("exploreUncovered",-1);
	    	String myselfName = "exploreUncovered";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "exploreUncovered(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	it.unibo.planning.planUtil.findNextCellUncovered( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?uncovered(X,Y)" )) != null ){
	    	temporaryStr = "uncovered(X,Y)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?uncovered(X,Y)" )) != null ){
	    	it.unibo.planning.planUtil.setGoal( myself ,guardVars.get("X"), guardVars.get("Y")  );
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??uncovered(X,Y)" )) != null ){
	    	it.unibo.planning.planUtil.doPlanEnterprising( myself  );
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{() -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("endAction") ){
	            	String parg = "\"bye\"";
	            	parg = updateVars(  Term.createTerm("endAction"), Term.createTerm("endAction"), 
	            		    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) println( parg );
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=exploreUncovered WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          }
	          }, 
	          new String[]{"true","M","endAction" },
	          100, "doActions" );//msgTransition
	    }catch(Exception e_exploreUncovered){  
	    	 println( getName() + " plan=exploreUncovered WARNING:" + e_exploreUncovered.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//exploreUncovered
	    
	    StateFun backToHome = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("backToHome",-1);
	    	String myselfName = "backToHome";  
	    	temporaryStr = "\"Back to home state\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(0,0,D)" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"AT HOME \"";
	    	println( temporaryStr );  
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??bombDetected(X)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"waitSecondRobot","waitSecondRobot", guardVars ).toString();
	    	sendMsg("waitSecondRobot",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??halted(V)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"backToInit","backToInit", guardVars ).toString();
	    	sendMsg("backToInit",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}};//actionseq
	    	}};//actionseq
	    	}
	    	else{ {//actionseq
	    	it.unibo.planning.planUtil.setGoal( myself ,"0", "0"  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "backToHome(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?halted(V)" )) != null ){
	    	{//actionseq
	    	it.unibo.planning.planUtil.doPlanConservative( myself  );
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?bombDetected(X)" )) != null ){
	    	{//actionseq
	    	it.unibo.planning.planUtil.doPlanConservative( myself  );
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	it.unibo.planning.planUtil.doPlanEnterprising( myself  );
	    	};//actionseq
	    	}};//actionseq
	    	}};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("exploreStep"), stateTab.get("waitingToRemoveBomb"), stateTab.get("waitAndCheckCond") }, 
	          new String[]{"true","M","endAction", "true","M","waitSecondRobot", "true","M","backToInit" },
	          100, "doActions" );//msgTransition
	    }catch(Exception e_backToHome){  
	    	 println( getName() + " plan=backToHome WARNING:" + e_backToHome.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//backToHome
	    
	    StateFun waitingToRemoveBomb = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitingToRemoveBomb",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitingToRemoveBomb";  
	    	temporaryStr = "\"Waiting to remove bomb\"";
	    	println( temporaryStr );  
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(waitingSecondRobot)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(waitingSecondRobot)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"discoveryAtHome","discoveryAtHome", guardVars ).toString();
	    	sendMsg("discoveryAtHome","worldobserver", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("updateMapAndBackToInit") }, 
	          new String[]{"true","E","bombRetrievedEvent" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitingToRemoveBomb){  
	    	 println( getName() + " plan=waitingToRemoveBomb WARNING:" + e_waitingToRemoveBomb.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitingToRemoveBomb
	    
	    StateFun updateMapAndBackToInit = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("updateMapAndBackToInit",-1);
	    	String myselfName = "updateMapAndBackToInit";  
	    	temporaryStr = "\"bomb retrieved event\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?bombToRetrieve(X,Y)" )) != null ){
	    	temporaryStr = "bomb(X,Y)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?bombToRetrieve(X,Y)" )) != null ){
	    	it.unibo.planning.mapUtil.setFreeCell( myself ,guardVars.get("X"), guardVars.get("Y")  );
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??bombToRetrieve(X,Y)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bombRetrievedMsg(X,Y)","bombRetrievedMsg(X,Y)", guardVars ).toString();
	    	sendMsg("bombRetrievedMsg","worldobserver", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	//switchTo waitAndCheckCond
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "waitAndCheckCond",false, false, null); 
	    }catch(Exception e_updateMapAndBackToInit){  
	    	 println( getName() + " plan=updateMapAndBackToInit WARNING:" + e_updateMapAndBackToInit.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//updateMapAndBackToInit
	    
	    StateFun doActions = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doActions",-1);
	    	String myselfName = "doActions";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "currPos(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?move(M)" )) != null ){
	    	temporaryStr = "doActions_doingTheMove(M)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?move(M)" )) != null )
	    	{
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?moveDone(M)" )) != null ){
	    	temporaryStr = "moveDone(M)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	temporaryStr = "moveDone(_)";
	    	removeRule( temporaryStr );  
	    	{
	    	String tStr1 = "moveDuration(_)";
	    	String tStr2 = "moveDuration(moveWDuration(0))";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?doTheMove(a)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveAction(D,REPLAN)","moveAction(a,false)", guardVars ).toString();
	    	sendMsg("moveAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?doTheMove(d)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveAction(D,REPLAN)","moveAction(d,false)", guardVars ).toString();
	    	sendMsg("moveAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?doTheMove(w)" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"Dentro do the Move w\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??moveDone(T)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveMsgCmd(TF)","moveMsgCmd(T)", guardVars ).toString();
	    	sendMsg("moveMsgCmd","onecellforward", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"waitMoveWAnswer","waitMoveWAnswer", guardVars ).toString();
	    	sendMsg("waitMoveWAnswer",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("nextMove"), stateTab.get("backToHome"), stateTab.get("waitForwardHomeMoveAnswer") }, 
	          new String[]{"true","M","moveAction", "true","M","endAction", "true","M","waitMoveWAnswer" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doActions){  
	    	 println( getName() + " plan=doActions WARNING:" + e_doActions.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doActions
	    
	    StateFun nextMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("nextMove",-1);
	    	String myselfName = "nextMove";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("moveAction(a,_)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveAction") && 
	    		pengine.unify(curT, Term.createTerm("moveAction(D,REPLAN)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?timeTurn(T)" )) != null ){
	    		it.unibo.utils.movePlanUtil.move( myself ,"a", guardVars.get("T")  );
	    		}
	    		};//actionseq
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("moveAction(d,_)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveAction") && 
	    		pengine.unify(curT, Term.createTerm("moveAction(D,REPLAN)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?timeTurn(T)" )) != null ){
	    		it.unibo.utils.movePlanUtil.move( myself ,"d", guardVars.get("T")  );
	    		}
	    		};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "curPos(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	//switchTo doActions
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "doActions",false, false, null); 
	    }catch(Exception e_nextMove){  
	    	 println( getName() + " plan=nextMove WARNING:" + e_nextMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//nextMove
	    
	    StateFun waitForwardHomeMoveAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitForwardHomeMoveAnswer",-1);
	    	String myselfName = "waitForwardHomeMoveAnswer";  
	    	temporaryStr = "\"Waiting answer\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleCmdDone"), stateTab.get("handleFixedObstacleCases") }, 
	          new String[]{"true","M","moveMsgCmdDone", "true","M","moveMsgCmdObstacle" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForwardHomeMoveAnswer){  
	    	 println( getName() + " plan=waitForwardHomeMoveAnswer WARNING:" + e_waitForwardHomeMoveAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForwardHomeMoveAnswer
	    
	    StateFun handleCmdDone = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleCmdDone",-1);
	    	String myselfName = "handleCmdDone";  
	    	it.unibo.planning.planUtil.doMove( myself ,"w"  );
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cellValue(X,Y,S)","cellValue(X,Y,1)", guardVars ).toString();
	    	sendMsg("cellValueMsg","worldobserver", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//switchTo checkStop
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "checkStop",false, false, null); 
	    }catch(Exception e_handleCmdDone){  
	    	 println( getName() + " plan=handleCmdDone WARNING:" + e_handleCmdDone.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleCmdDone
	    
	    StateFun checkStop = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkStop",-1);
	    	String myselfName = "checkStop";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?envCond(ko)" )) != null ){
	    	{//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(0,0,D)" )) != null ){
	    	{//actionseq
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(atHomeWithInvalidCondition)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(atHomeWithInvalidCondition)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"backToInit","backToInit", guardVars ).toString();
	    	sendMsg("backToInit",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(comingBackToHomeSinceInvalidCondition)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(comingBackToHomeSinceInvalidCondition)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"stopWork(V)","stopWork(ko)", guardVars ).toString();
	    	sendMsg("stopWork",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("backToHome"), stateTab.get("waitAndCheckCond"), stateTab.get("handleStop") }, 
	          new String[]{"true","M","stopWork", "true","M","backToInit", "true","M","haltAppl" },
	          20, "doActions" );//msgTransition
	    }catch(Exception e_checkStop){  
	    	 println( getName() + " plan=checkStop WARNING:" + e_checkStop.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkStop
	    
	    StateFun handleStop = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleStop",-1);
	    	String myselfName = "handleStop";  
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(stopped)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(stopped)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = "\"Stopping the exploration, continue or back to home?\"";
	    	println( temporaryStr );  
	    	it.unibo.utils.movePlanUtil.moveNoMap( myself ,"h", "100"  );
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("resumeExploration"), stateTab.get("haltAndGoToHome") }, 
	          new String[]{"true","M","resumeExploration", "true","M","backToHome" },
	          6000000, "doActions" );//msgTransition
	    }catch(Exception e_handleStop){  
	    	 println( getName() + " plan=handleStop WARNING:" + e_handleStop.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleStop
	    
	    StateFun resumeExploration = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("resumeExploration",-1);
	    	String myselfName = "resumeExploration";  
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(exploring)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(exploring)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	//switchTo doActions
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "doActions",false, false, null); 
	    }catch(Exception e_resumeExploration){  
	    	 println( getName() + " plan=resumeExploration WARNING:" + e_resumeExploration.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//resumeExploration
	    
	    StateFun haltAndGoToHome = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("haltAndGoToHome",-1);
	    	String myselfName = "haltAndGoToHome";  
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(comingBackToHomeSinceHalt)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(comingBackToHomeSinceHalt)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = "halted(1)";
	    	addRule( temporaryStr );  
	    	it.unibo.planning.planUtil.clearCurrentPlan( myself  );
	    	//switchTo backToHome
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "backToHome",false, false, null); 
	    }catch(Exception e_haltAndGoToHome){  
	    	 println( getName() + " plan=haltAndGoToHome WARNING:" + e_haltAndGoToHome.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//haltAndGoToHome
	    
	    StateFun handleError = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleError",-1);
	    	String myselfName = "handleError";  
	    	temporaryStr = "\"mind ERROR\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"mind_"+myselfName,false,false);
	    }catch(Exception e_handleError){  
	    	 println( getName() + " plan=handleError WARNING:" + e_handleError.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleError
	    
	    StateFun handleFixedObstacleCases = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleFixedObstacleCases",-1);
	    	String myselfName = "handleFixedObstacleCases";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "handleFixedObstacleCases_1(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	it.unibo.planning.planUtil.markCellAsObstacle( myself  );
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("moveMsgCmdObstacle(moveWDuration(T))");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveMsgCmdObstacle") && 
	    		pengine.unify(curT, Term.createTerm("moveMsgCmdObstacle(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "s" ;
	    		//end arg1
	    		String arg2 = "T" ;
	    		arg2 =  updateVars( Term.createTerm("moveMsgCmdObstacle(X)"), Term.createTerm("moveMsgCmdObstacle(moveWDuration(T))"), 
	    			                Term.createTerm(currentMessage.msgContent()),  arg2 );	                
	    		//end arg2
	    		it.unibo.utils.movePlanUtil.moveNoMap(this,arg1,arg2 );
	    		}
	    	}
	    	it.unibo.utils.movePlanUtil.moveNoMap( myself ,"h", "100"  );
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	//switchTo handleObstacleBomb
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "handleObstacleBomb",false, false, null); 
	    }catch(Exception e_handleFixedObstacleCases){  
	    	 println( getName() + " plan=handleFixedObstacleCases WARNING:" + e_handleFixedObstacleCases.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleFixedObstacleCases
	    
	    StateFun handleObstacleBomb = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleObstacleBomb",-1);
	    	String myselfName = "handleObstacleBomb";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	parg = "obstacleCell(X,Y,D,_,_)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(obstacleCell(X,Y,D,X1,Y1))" )) != null ){
	    	temporaryStr = "obstacleCell(X1,Y1)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(obstacleCell(X,Y,D,X1,Y1))" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cellValue(X,Y,S)","cellValue(X1,Y1,x)", guardVars ).toString();
	    	sendMsg("cellValueMsg","worldobserver", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	temporaryStr = "\"Taking Photo\"";
	    	println( temporaryStr );  
	    	it.unibo.planning.photoUtils.sendPhoto( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(obstacleCell(X,Y,D,X1,Y1))" )) != null ){
	    	//PublisEventhMove simple
	    	parg = "obstacle(curPos(X1,Y1,D))";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	sendMsgMqtt(  "unibo/qasys", "obstacle", "none", parg );
	    	}
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(waitingObstacleClassification)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(waitingObstacleClassification)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = "\"Sono in attesa di istruzioni\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("backToHomeSinceBomb"), stateTab.get("continueIsNotBomb") }, 
	          new String[]{"true","M","backToHomeSinceBomb", "true","M","continueExploration" },
	          6000000, "doActions" );//msgTransition
	    }catch(Exception e_handleObstacleBomb){  
	    	 println( getName() + " plan=handleObstacleBomb WARNING:" + e_handleObstacleBomb.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleObstacleBomb
	    
	    StateFun continueIsNotBomb = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("continueIsNotBomb",-1);
	    	String myselfName = "continueIsNotBomb";  
	    	it.unibo.planning.planUtil.clearCurrentPlan( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	parg = "obstacleCell(X,Y,D,_,_)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(obstacleCell(X,Y,D,X1,Y1))" )) != null ){
	    	parg = "goalIsObstacle(X1,Y1)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(exploring)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(exploring)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(failure)" )) != null ){
	    	{//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curGoal(N,N)" )) != null ){
	    	it.unibo.planning.planUtil.setGoal( myself ,guardVars.get("N"), guardVars.get("N")  );
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curGoal(N,N)" )) != null ){
	    	it.unibo.planning.planUtil.doPlanEnterprising( myself  );
	    	}
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"backToHome(X)","backToHome(1)", guardVars ).toString();
	    	sendMsg("backToHome",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("backToHome") }, 
	          new String[]{"true","M","backToHome" },
	          20, "doActions" );//msgTransition
	    }catch(Exception e_continueIsNotBomb){  
	    	 println( getName() + " plan=continueIsNotBomb WARNING:" + e_continueIsNotBomb.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//continueIsNotBomb
	    
	    StateFun backToHomeSinceBomb = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("backToHomeSinceBomb",-1);
	    	String myselfName = "backToHomeSinceBomb";  
	    	{
	    	String tStr1 = "robotState(_)";
	    	String tStr2 = "robotState(comingBackToHomeSinceBomb)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotState(V)","robotState(comingBackToHomeSinceBomb)", guardVars ).toString();
	    	emit( "robotState", temporaryStr );
	    	temporaryStr = "\"Going to home since bomb\"";
	    	println( temporaryStr );  
	    	temporaryStr = "bombDetected(1)";
	    	addRule( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	parg = "obstacleCell(X,Y,D,_,_)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(obstacleCell(X,Y,D,X1,Y1))" )) != null ){
	    	temporaryStr = "bombToRetrieve(X1,Y1)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??goalResult(obstacleCell(X,Y,D,X1,Y1))" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bombPosition(X,Y)","bombPosition(X1,Y1)", guardVars ).toString();
	    	sendMsg("bombPosition","worldobserver", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mind_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          100, "backToHome" );//msgTransition
	    }catch(Exception e_backToHomeSinceBomb){  
	    	 println( getName() + " plan=backToHomeSinceBomb WARNING:" + e_backToHomeSinceBomb.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//backToHomeSinceBomb
	    
	    StateFun handleSonar = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleSonar",-1);
	    	String myselfName = "handleSonar";  
	    	temporaryStr = "\"handleSonarrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\"";
	    	println( temporaryStr );  
	    	printCurrentEvent(false);
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("obstacle(X)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarDetect") && 
	    		pengine.unify(curT, Term.createTerm("obstacle(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "obstacle(X)";
	    			/* PublishEventMove */
	    			parg =  updateVars( Term.createTerm("obstacle(X)"), Term.createTerm("obstacle(X)"), 
	    				    		  Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsgMqtt(  "unibo/qasys", "sonarDetect", "none", parg );
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(SONAR,TARGET,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonar") && 
	    		pengine.unify(curT, Term.createTerm("sonar(SONAR,TARGET,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "sonar(SONAR,TARGET,DISTANCE)";
	    			/* PublishEventMove */
	    			parg =  updateVars( Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"), Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"), 
	    				    		  Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsgMqtt(  "unibo/qasys", "sonar", "none", parg );
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"mind_"+myselfName,false,true);
	    }catch(Exception e_handleSonar){  
	    	 println( getName() + " plan=handleSonar WARNING:" + e_handleSonar.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleSonar
	    
	    StateFun haltAppl = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("haltAppl",-1);
	    	String myselfName = "haltAppl";  
	    	temporaryStr = "\"mind HALT APPLICATION\"";
	    	println( temporaryStr );  
	    	//switchTo waitAndCheckCond
	        switchToPlanAsNextState(pr, myselfName, "mind_"+myselfName, 
	              "waitAndCheckCond",false, true, null); 
	    }catch(Exception e_haltAppl){  
	    	 println( getName() + " plan=haltAppl WARNING:" + e_haltAppl.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//haltAppl
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
