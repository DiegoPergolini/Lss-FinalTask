/* Generated by AN DISI Unibo */ 
package it.unibo.map_keeper;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractMap_keeper extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	//protected String mqttServer = "tcp://localhost:1883";
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractMap_keeper(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/map_keeper/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/map_keeper/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("handleMsg",handleMsg);
	    	stateTab.put("sendCommandStart",sendCommandStart);
	    	stateTab.put("bombRetrieved",bombRetrieved);
	    	stateTab.put("handleBombPosition",handleBombPosition);
	    	stateTab.put("handleMap",handleMap);
	    	stateTab.put("buildMap",buildMap);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "map_keeper tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	parg = "consult(\"./src/theory.pl\")";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	     connectToMqttServer("tcp://localhost:1883");
	    	//switchTo handleMsg
	        switchToPlanAsNextState(pr, myselfName, "map_keeper_"+myselfName, 
	              "handleMsg",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun handleMsg = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleMsg",-1);
	    	String myselfName = "handleMsg";  
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	//bbb
	     msgTransition( pr,myselfName,"map_keeper_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleMap"), stateTab.get("handleBombPosition"), stateTab.get("bombRetrieved"), stateTab.get("sendCommandStart") }, 
	          new String[]{"true","M","allMap", "true","M","bombPosition", "true","M","bombRetrieved", "true","M","startRetrievingMsg" },
	          6000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handleMsg){  
	    	 println( getName() + " plan=handleMsg WARNING:" + e_handleMsg.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleMsg
	    
	    StateFun sendCommandStart = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("sendCommandStart",-1);
	    	String myselfName = "sendCommandStart";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"startRetrievingMsg","startRetrievingMsg", guardVars ).toString();
	    	sendMsg("startRetrievingMsg","robot_retriever", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo handleMsg
	        switchToPlanAsNextState(pr, myselfName, "map_keeper_"+myselfName, 
	              "handleMsg",false, false, null); 
	    }catch(Exception e_sendCommandStart){  
	    	 println( getName() + " plan=sendCommandStart WARNING:" + e_sendCommandStart.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//sendCommandStart
	    
	    StateFun bombRetrieved = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("bombRetrieved",-1);
	    	String myselfName = "bombRetrieved";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bombRetrieved(X,Y)");
	    	if( currentMessage != null && currentMessage.msgId().equals("bombRetrieved") && 
	    		pengine.unify(curT, Term.createTerm("bombRetrieved(X,Y)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "X" ;
	    		arg1 =  updateVars( Term.createTerm("bombRetrieved(X,Y)"), Term.createTerm("bombRetrieved(X,Y)"), 
	    			                Term.createTerm(currentMessage.msgContent()),  arg1 );	                
	    		//end arg1
	    		String arg2 = "Y" ;
	    		arg2 =  updateVars( Term.createTerm("bombRetrieved(X,Y)"), Term.createTerm("bombRetrieved(X,Y)"), 
	    			                Term.createTerm(currentMessage.msgContent()),  arg2 );	                
	    		//end arg2
	    		it.unibo.planning.photoUtils.sendMsg(this,arg1,arg2 );
	    		}
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"map_keeper_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          100, "handleMsg" );//msgTransition
	    }catch(Exception e_bombRetrieved){  
	    	 println( getName() + " plan=bombRetrieved WARNING:" + e_bombRetrieved.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//bombRetrieved
	    
	    StateFun handleBombPosition = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleBombPosition",-1);
	    	String myselfName = "handleBombPosition";  
	    	temporaryStr = "\"Bomb position\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bombPosition(X,Y)");
	    	if( currentMessage != null && currentMessage.msgId().equals("bombPosition") && 
	    		pengine.unify(curT, Term.createTerm("bombPosition(X,Y)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="bombPosition(X,Y)";
	    		/* AddRule */
	    		parg = updateVars(Term.createTerm("bombPosition(X,Y)"),  Term.createTerm("bombPosition(X,Y)"), 
	    			    		  			Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?bombPosition(X,Y)" )) != null ){
	    	temporaryStr = "bombPosition(X,Y)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??bombPosition(X,Y)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bombPosition(X,Y)","bombPosition(X,Y)", guardVars ).toString();
	    	sendMsg("bombPosition","robot_retriever", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"map_keeper_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          100, "handleMsg" );//msgTransition
	    }catch(Exception e_handleBombPosition){  
	    	 println( getName() + " plan=handleBombPosition WARNING:" + e_handleBombPosition.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleBombPosition
	    
	    StateFun handleMap = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleMap",-1);
	    	String myselfName = "handleMap";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("allMap(D)");
	    	if( currentMessage != null && currentMessage.msgId().equals("allMap") && 
	    		pengine.unify(curT, Term.createTerm("allMap(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="dosomething(D)";
	    		/* PHead */
	    		parg =  updateVars( Term.createTerm("allMap(X)"), 
	    		                    Term.createTerm("allMap(D)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    			if( parg != null ) {
	    			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    				if( aar.getInterrupted() ){
	    					curPlanInExec   = "handleMap";
	    					if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    					if( ! aar.getGoon() ) return ;
	    				} 			
	    				if( aar.getResult().equals("failure")){
	    					if( ! aar.getGoon() ) return ;
	    				}else if( ! aar.getGoon() ) return ;
	    			}
	    	}
	    	//switchTo buildMap
	        switchToPlanAsNextState(pr, myselfName, "map_keeper_"+myselfName, 
	              "buildMap",false, false, null); 
	    }catch(Exception e_handleMap){  
	    	 println( getName() + " plan=handleMap WARNING:" + e_handleMap.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleMap
	    
	    StateFun buildMap = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("buildMap",-1);
	    	String myselfName = "buildMap";  
	    	temporaryStr = "\"building map..\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??cellState(X,Y,1)" )) != null ){
	    	it.unibo.planning.mapUtil.setFreeCell( myself ,guardVars.get("X"), guardVars.get("Y")  );
	    	}
	    	else{ {//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??cellState(X,Y,x)" )) != null ){
	    	it.unibo.planning.mapUtil.setObstacle( myself ,guardVars.get("X"), guardVars.get("Y")  );
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"mapCompleted","mapCompleted", guardVars ).toString();
	    	sendMsg("mapCompleted",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"map_keeper_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleMsg") }, 
	          new String[]{"true","M","mapCompleted" },
	          20, "buildMap" );//msgTransition
	    }catch(Exception e_buildMap){  
	    	 println( getName() + " plan=buildMap WARNING:" + e_buildMap.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//buildMap
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
